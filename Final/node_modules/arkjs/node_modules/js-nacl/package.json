{
  "name": "js-nacl",
  "version": "1.2.1",
  "description": "High-level API to libsodium.",
  "main": "lib/nacl_factory.js",
  "author": {
    "name": "Tony Garnock-Jones"
  },
  "keywords": [
    "encryption",
    "high-level",
    "crypto",
    "networking",
    "nacl"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tonyg/js-nacl.git"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha --ui exports test"
  },
  "devDependencies": {
    "mocha": ""
  },
  "gitHead": "6dc1417057cd81381d332b370e82ceab1f2416af",
  "readme": "# js-nacl: Pure-Javascript High-level API to Emscripten-compiled libsodium routines\r\n\r\nA high-level Javascript API wrapping an\r\n[Emscripten](https://github.com/kripken/emscripten)-compiled\r\n[libsodium](http://libsodium.org/), a cryptographic library based on\r\n[NaCl](http://nacl.cr.yp.to/). Includes both in-browser and node.js\r\nsupport.\r\n\r\nThe paper \"[The security impact of a new cryptographic\r\nlibrary](http://cr.yp.to/highspeed/coolnacl-20120725.pdf)\" is an\r\nexcellent summary of the motivation behind the NaCl API and library\r\ndesign.\r\n\r\nUsing this library in the browser requires support for the newish\r\n`window.crypto.getRandomValues` API.\r\n\r\n**WARNING**: This code will not run in Safari version 5.1.x; or, at\r\nleast, will not run when Safari's Javascript debug mode is *disabled*.\r\nSymptoms include corruption during hash calculation, failures when\r\nunboxing, and failures when producing and verifying signatures. Safari\r\n7.0 seems to be just fine, however. I don't know exactly at which\r\nversion Safari started working: I don't have access to enough of a\r\nrange of systems. The code has run fine on Chrome and Firefox across\r\nall the versions I've tried.\r\n\r\n## Changes\r\n\r\nVersion 1.2.1: Repaired a mistake where I had failed to export the new\r\nnames `crypto_sign_seed_keypair` and `crypto_box_seed_keypair`.\r\n\r\nVersion 1.2.0: js-nacl is now based around libsodium rather than the\r\nplain NaCl tarball. Functions `crypto_sign_keypair_from_seed` and\r\n`crypto_box_keypair_from_seed` have been renamed to their libsodium\r\nnames, `crypto_sign_seed_keypair` and `crypto_box_seed_keypair`\r\nrespectively; the old names are still available as aliases, though\r\n**deprecated**, to be removed in a future version.\r\n\r\nVersion 1.1.0: **API change.** The `nacl_factory.instantiate` function\r\nnow expects a callback as its first argument. It calls the callback\r\nwith the `nacl` instance containing the API functions, and returns no\r\nuseful value.\r\n\r\nVersion 0.5.0: **API change.** Instead of being provided with a module\r\n`nacl`, with API functions available directly, library importers are\r\ngiven `nacl_factory` with a single function `instantiate`, which\r\nreturns a `nacl` instance containing the API functions.\r\n\r\n## NPM Package\r\n\r\nThis library is [registered on\r\nnpmjs.org](https://npmjs.org/package/js-nacl). To install it:\r\n\r\n    npm install js-nacl\r\n\r\n## Building the library\r\n\r\nThe git checkout includes a pre-compiled version of the library, so\r\nyou won't need Emscripten unless you want to change something about\r\nthe underlying C-language library itself.\r\n\r\nEssentially, the source checkout contains everything you will need to\r\nuse the library in both the browser and in node.js.\r\n\r\nIf you do find yourself wanting to build the library, see the\r\ninstructions in\r\n[BUILDING.md](https://github.com/tonyg/js-nacl/blob/master/BUILDING.md).\r\n\r\n## Using the library\r\n\r\nIn the browser, include the `lib/nacl_factory.js` script:\r\n\r\n    <script src=\"lib/nacl_factory.js\"></script>\r\n    ...\r\n    <script>\r\n      nacl_factory.instantiate(function (nacl) {\r\n        alert(nacl.to_hex(nacl.random_bytes(16)));\r\n      });\r\n    </script>\r\n\r\nIn node.js, require the `lib/nacl_factory.js` module:\r\n\r\n    var nacl_factory = require(\"./lib/nacl_factory.js\");\r\n    nacl_factory.instantiate(function (nacl) {\r\n      ...\r\n      console.log(nacl.to_hex(nacl.random_bytes(16)));\r\n    });\r\n\r\nOr if you have installed the library via `npm`,\r\n\r\n    var nacl_factory = require(\"js-nacl\");\r\n    nacl_factory.instantiate(function (nacl) {\r\n      ...\r\n      console.log(nacl.to_hex(nacl.random_bytes(16)));\r\n    });\r\n\r\n## Instantiating the NaCl module\r\n\r\nPass `nacl_factory.instantiate` a callback function expecting a single\r\nargument, the `nacl` module instance.\r\n\r\nThe `nacl_factory.instantiate` function expects also a second optional\r\nargument, a dictionary of optional configuration values.\r\n\r\nEach call to `nacl_factory.instantiate()` creates an entirely fresh\r\nmodule instance, complete with its own private heap area. By default,\r\nthis heap is 32 megabytes in size, 33,554,432 bytes. The size of the\r\nmodule instance's private heap can be altered by supplying\r\n`requested_total_memory` to to `instantiate`, e.g.:\r\n\r\n    nacl_factory.instantiate(on_ready, {\r\n      requested_total_memory: 16777216\r\n    });\r\n\r\nThe argument must be a power of two, if supplied.\r\n\r\nIt's fine to instantiate the module more than once in a single\r\nprogram, though do note the large amount of memory taken up by each\r\ninstance. The memory assigned to each module instance will not be\r\nreleased until the instance is garbage collected.\r\n\r\nIf you notice memory leaks across multiple uses of a *single* module\r\ninstance, please report them, with a test case if at all possible.\r\n\r\n## Strings vs. Binary Data\r\n\r\nThe library enforces a strict distinction between strings and binary\r\ndata. Binary data is represented using instances of\r\n[`Uint8Array`](https://developer.mozilla.org/en-US/docs/JavaScript/Typed_arrays/Uint8Array).\r\n\r\n### nacl.to_hex(Uint8Array) → String\r\n\r\nReturns a lower-case hexadecimal representation of the given binary\r\ndata.\r\n\r\n### nacl.from_hex(String) → Uint8Array\r\n\r\nConverts a lower- or upper-case hexadecimal representation of binary\r\ndata into the equivalent Uint8Array.\r\n\r\n### nacl.encode_utf8(String) → Uint8Array\r\n\r\nReturns the binary equivalent of the argument, encoded using UTF-8.\r\n\r\n### nacl.encode_latin1(String) → Uint8Array\r\n\r\nReturns the binary equivalent of the argument, encoded using Latin1\r\n(an 8-bit clean encoding). If any of the character codes in the\r\nargument string are greater than 255, an exception is thrown.\r\n\r\n### nacl.decode_utf8(Uint8Array) → String\r\n\r\nDecodes the binary data in the argument using the UTF-8 encoding,\r\nproducing the corresponding string.\r\n\r\n### nacl.decode_latin1(Uint8Array) → String\r\n\r\nDecodes the binary data in the argument using the Latin1 8-bit clean\r\nencoding, producing the corresponding string.\r\n\r\n## Hashing: crypto_hash\r\n\r\nFollows the [NaCl crypto_hash API](http://nacl.cr.yp.to/hash.html).\r\n\r\n### nacl.crypto\\_hash(Uint8Array) → Uint8Array\r\n\r\nComputes the SHA-512 hash of its argument.\r\n\r\nWhile SHA-512 is recommended, the SHA-256 function is also available,\r\nas `nacl.crypto\\_hash\\_sha256`.\r\n\r\n### nacl.crypto\\_hash\\_string(String) → Uint8Array\r\n\r\nEncodes its argument using `nacl.encode_utf8`, and then calls\r\n`crypto_hash`.\r\n\r\n## Public-key authenticated encryption: crypto_box\r\n\r\nFollows the [NaCl crypto_box API](http://nacl.cr.yp.to/box.html).\r\n\r\nYou do not need to perform any padding of any arguments to these\r\nfunctions; the API given here is most similar to the \"C++\" API in the\r\nNaCl documentation.\r\n\r\n**Make sure to follow the instructions regarding nonce selection given\r\nin the \"Security model\" section of the NaCl API documentation!**\r\n\r\n    senderKeypair = nacl.crypto_box_keypair();\r\n    recipientKeypair = nacl.crypto_box_keypair();\r\n    message = nacl.encode_utf8(\"Hello!\");\r\n\r\n    nonce = nacl.crypto_box_random_nonce();\r\n    packet = nacl.crypto_box(message, nonce, recipientKeypair.boxPk, senderKeypair.boxSk);\r\n\r\n    decoded = nacl.crypto_box_open(packet, nonce, senderKeypair.boxPk, recipientKeypair.boxSk);\r\n\r\n    \"Hello!\" === nacl.decode_utf8(decoded); // always true\r\n\r\n### nacl.crypto\\_box\\_keypair() → {\"boxPk\": Uint8Array, \"boxSk\": Uint8Array}\r\n\r\nCreates a fresh random keypair. `boxPk` is the public key and `boxSk`\r\nis the secret key.\r\n\r\n### nacl.crypto\\_box\\_random\\_nonce() → Uint8Array\r\n\r\nReturns a fresh randomly-chosen nonce suitable for use with\r\n`crypto_box`.\r\n\r\n### nacl.crypto\\_box(msgBin, nonceBin, recipientPublicKeyBin, senderSecretKeyBin) → Uint8Array\r\n\r\nPlaces `msg` in an authenticated, encrypted box that can only be\r\nverified and decrypted by the secret key corresponding to\r\n`recipientPublicKey`.\r\n\r\n### nacl.crypto\\_box\\_open(ciphertextBin, nonceBin, senderPublicKeyBin, recipientSecretKeyBin) → Uint8Array\r\n\r\nVerifies and decrypts a box from `crypto_box`. Throws an exception if\r\nthe verification fails or any of the inputs are invalid.\r\n\r\n### nacl.crypto\\_box\\_precompute(publicKeyBin, secretKeyBin) → {\"boxK\": Uint8Array}\r\n\r\nPrecomputes a shared secret between two parties. See the documentation\r\nfor `crypto_box_beforenm` at the NaCl website.\r\n\r\n### nacl.crypto\\_box\\_precomputed(msgBin, nonceBin, {\"boxK\": Uint8Array}) → Uint8Array<br>nacl.crypto\\_box\\_open\\_precomputed(ciphertextBin, nonceBin, {\"boxK\": Uint8Array}) → Uint8Array\r\n\r\nPrecomputed-secret variants of `crypto_box` and `crypto_box_open`.\r\n\r\n## Secret-key authenticated encryption: crypto_secretbox\r\n\r\nFollows the [NaCl crypto_secretbox API](http://nacl.cr.yp.to/secretbox.html).\r\n\r\nYou do not need to perform any padding of any arguments to these\r\nfunctions; the API given here is most similar to the \"C++\" API in the\r\nNaCl documentation.\r\n\r\n**Make sure to follow the instructions regarding nonce selection given\r\nin the \"Security model\" section of the NaCl API documentation!**\r\n\r\n    k = ...;\r\n    m = nacl.encode_utf8(\"message\");\r\n    n = nacl.crypto_secretbox_random_nonce();\r\n    c = nacl.crypto_secretbox(m, n, k);\r\n    m1 = nacl.crypto_secretbox_open(c, n, k);\r\n    \"message\" === nacl.decode_utf8(m1); // always true\r\n\r\n### nacl.crypto\\_secretbox\\_random\\_nonce() → Uint8Array\r\n\r\nReturns a fresh randomly-chosen nonce suitable for use with\r\n`crypto_secretbox`.\r\n\r\n### nacl.crypto\\_secretbox(msgBin, nonceBin, keyBin) → Uint8Array\r\n\r\nPlaces `msg` in an authenticated, encrypted box that can only be\r\nverified and decrypted by someone who knows `keyBin`. The `keyBin`\r\nUint8Array must be `nacl.crypto_secretbox_KEYBYTES` bytes long.\r\n\r\n### nacl.crypto\\_secretbox\\_open(ciphertextBin, nonceBin, keyBin) → Uint8Array\r\n\r\nVerifies and decrypts a packet from `crypto_secretbox`. Throws an\r\nexception if the verification fails or any of the inputs are invalid.\r\n\r\n## Secret-key encryption: crypto_stream\r\n\r\nFollows the [NaCl crypto_stream API](http://nacl.cr.yp.to/stream.html).\r\n\r\n**Make sure to follow the instructions regarding nonce selection given\r\nin the \"Security model\" section of the NaCl API documentation!**\r\n\r\nSince this style of secret-key encryption is symmetric,\r\n`nacl.crypto_stream_xor` is suitable for decryption as well as\r\nencryption:\r\n\r\n    k = ...;\r\n    m = nacl.encode_utf8(\"message\");\r\n    n = nacl.crypto_stream_random_nonce();\r\n    c = nacl.crypto_stream_xor(m, n, k);\r\n    m1 = nacl.crypto_stream_xor(c, n, k);\r\n    \"message\" === nacl.decode_utf8(m1); // always true\r\n\r\n### nacl.crypto\\_stream\\_random\\_nonce() → Uint8Array\r\n\r\nReturns a fresh randomly-chosen nonce suitable for use with\r\n`crypto_stream`.\r\n\r\n### nacl.crypto\\_stream(lenInt, nonceBin, keyBin) → Uint8Array\r\n\r\nReturns a `lenInt`-byte length keystream based on the given nonce and\r\nkey. The key must be `nacl.crypto_stream_KEYBYTES` bytes long.\r\n\r\n### nacl.crypto\\_stream\\_xor(msgBin, nonceBin, keyBin) → Uint8Array\r\n\r\nReturns `msgBin.length` bytes of ciphertext (or plaintext, depending\r\non the contents of `msgBin`) produced by XORing `msgBin` with the\r\nresult of `nacl.crypto_stream(msgBin.length, nonceBin, keyBin)`.\r\n\r\n## Secret-key single-message authentication: crypto_onetimeauth\r\n\r\nFollows the [NaCl crypto_onetimeauth API](http://nacl.cr.yp.to/onetimeauth.html).\r\n\r\n## Secret-key message authentication: crypto_auth\r\n\r\nFollows the [NaCl crypto_auth API](http://nacl.cr.yp.to/auth.html).\r\n\r\n## Signatures: crypto_sign\r\n\r\nFollows the [NaCl crypto_sign API](http://nacl.cr.yp.to/sign.html).\r\n\r\nNote that this uses the version of [Ed25519](http://ed25519.cr.yp.to/)\r\nfrom [SUPERCOP](http://bench.cr.yp.to/supercop.html), and *not* the\r\nold prototype implementation from the nacl 20110221 release.\r\n\r\nThe SUPERCOP Ed25519 signature scheme used is compatible with\r\nlibsodium and most other bindings and wrappers of libsodium and nacl.\r\n\r\n### nacl.crypto\\_sign\\_keypair() → {\"signPk\": Uint8Array, \"signSk\": Uint8Array}\r\n\r\nCreates a fresh random keypair. `signPk` is the public key and\r\n`signSk` is the secret key.\r\n\r\n    k = nacl.crypto_sign_keypair();\r\n    m = nacl.encode_utf8(\"message\");\r\n    signed_m = nacl.crypto_sign(m, k.signSk);\r\n    m1 = nacl.crypto_sign_open(signed_m, k.signPk);\r\n    \"message\" === nacl.decode_utf8(m1); // always true\r\n\r\n### nacl.crypto\\_sign(msgBin, signerSecretKey) → Uint8Array\r\n\r\nProduces a signature-wrapped version of `msgBin`.\r\n\r\n### nacl.crypto\\_sign\\_open(packetBin, signerPublicKey) → (Uint8Array || null)\r\n\r\nVerifies the signature on the given `packetBin`, and if it is valid,\r\nextracts the carried message and returns it. If the signature could\r\nnot be verified, returns `null`.\r\n\r\n### nacl.crypto\\_sign\\_detached(msgBin, signerSecretKey) → Uint8Array\r\n\r\n**WARNING: Experimental.** Produces a \"detached\" signature that,\r\nunlike `crypto_sign`, excludes the actual message body. The result can\r\nbe used with `crypto_sign_verify_detached`.\r\n\r\nThe returned detached signature will be `nacl.crypto_sign_BYTES` in\r\nlength.\r\n\r\n### nacl.crypto\\_sign\\_verify\\_detached(detachedSignatureBin, msgBin, signerPublicKey) → (true || false)\r\n\r\n**WARNING: Experimental.** Given a \"detached\" signature from\r\n`crypto_sign_detached`, along with the original message and the\r\nsigner's public signing key, returns `true` if the signature is valid,\r\nand `false` otherwise.\r\n\r\n## Derived Keys\r\n\r\n**WARNING: Experimental**\r\n\r\nIf you see yourself wanting to use these, you will need to know why\r\n[PBKDF2](http://en.wikipedia.org/wiki/PBKDF2) and\r\n[scrypt](http://www.tarsnap.com/scrypt.html) are of crucial\r\nimportance.\r\n\r\nYou might like to explore the use of these functions in tandem with\r\n`scrypt.crypto_scrypt` from\r\n[js-scrypt](https://github.com/tonyg/js-scrypt).\r\n\r\nIt is not generally safe to supply (for example) a user's passphrase\r\ndirectly to these procedures without using PBKDF2, scrypt or something\r\nsimilar beforehand.\r\n\r\n### nacl.crypto\\_sign\\_seed\\_keypair(Uint8Array) → {\"signPk\": Uint8Array, \"signSk\": Uint8Array}\r\n\r\nProduces a *signing* keypair from its argument. A given binary input\r\nwill always produce the same keypair as output.\r\n\r\nThe input must be 32 bytes long. As\r\n[Brian Warner puts it](https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/),\r\n\"Ed25519 keys start life as a 32-byte (256-bit) uniformly random\r\nbinary seed\" such as might be produced by sha256, or better yet,\r\nPBKDF2 or scrypt.\r\n\r\nMake sure to read and understand the warnings relating to passphrases,\r\nPBKDF2 and scrypt at the beginning of this section.\r\n\r\nCompatible with [PyNaCl](https://github.com/warner/pynacl)'s\r\n`crypto_sign_keypair_fromseed` and\r\n[racl](https://github.com/tonyg/racl)'s `bytes->crypto-sign-keypair`.\r\n\r\n(Prior to v1.2.0, known as `nacl.crypto_sign_keypair_from_seed`.)\r\n\r\n### nacl.crypto\\_box\\_seed\\_keypair(Uint8Array) → {\"boxPk\": Uint8Array, \"boxSk\": Uint8Array}\r\n\r\nProduces an *encrypted authenticated box* keypair from its argument. A\r\ngiven binary input will always produce the same keypair as output.\r\n\r\nThe input may be of any length. The input is hashed once with sha512,\r\nand the first 32 bytes of the result are taken as the 32-byte secret\r\nkey, which is then passed to `nacl.crypto_box_keypair_from_raw_sk`.\r\n\r\nMake sure to read and understand the warnings relating to passphrases,\r\nPBKDF2 and scrypt at the beginning of this section.\r\n\r\nCompatible with [racl](https://github.com/tonyg/racl)'s\r\n`bytes->crypto-box-keypair`.\r\n\r\n(Prior to v1.2.0, known as `nacl.crypto_box_keypair_from_seed`.)\r\n\r\n### nacl.crypto\\_box\\_keypair\\_from\\_raw\\_sk(Uint8Array) → {\"boxPk\": Uint8Array, \"boxSk\": Uint8Array}\r\n\r\nProduces an *encrypted authenticated box* keypair from its argument. A\r\ngiven binary input will always produce the same keypair as output.\r\n\r\nThe input must be 32 bytes long, and could be a random 32-byte value,\r\nor the output of sha256, or better yet, the output of PBKDF2 or\r\nscrypt.\r\n\r\nMake sure to read and understand the warnings relating to passphrases,\r\nPBKDF2 and scrypt at the beginning of this section.\r\n\r\nCompatible with [racl](https://github.com/tonyg/racl)'s\r\n`crypto-box-sk->pk`.\r\n\r\n## Low-level tools\r\n\r\n### nacl.crypto\\_scalarmult(Uint8Array, Uint8Array) → Uint8Array\r\n\r\nExpects two binaries, the first of length\r\n`nacl.crypto_scalarmult_SCALARBYTES` (representing an integer), and\r\nthe second of length `nacl.crypto_scalarmult_BYTES` (representing a\r\ngroup element). The two are multiplied using the underlying NaCl\r\n`crypto_scalarmult` primitive, and the resulting\r\n`nacl.crypto_scalarmult_BYTES`-length group element binary is\r\nreturned.\r\n\r\n### nacl.crypto\\_scalarmult\\_base(Uint8Array) → Uint8Array\r\n\r\nAs `nacl.crypto_scalarmult`, but multiplies the\r\n`nacl.crypto_scalarmult_SCALARBYTES`-length argument by a standard\r\ngroup element, returning the result.\r\n\r\n## License\r\n\r\njs-nacl is written by Tony Garnock-Jones <tonygarnockjones@gmail.com>\r\nand is licensed under the [MIT\r\nlicense](http://opensource.org/licenses/MIT):\r\n\r\n> Copyright &copy; 2013-2016 Tony Garnock-Jones.\r\n>\r\n> Permission is hereby granted, free of charge, to any person\r\n> obtaining a copy of this software and associated documentation files\r\n> (the \"Software\"), to deal in the Software without restriction,\r\n> including without limitation the rights to use, copy, modify, merge,\r\n> publish, distribute, sublicense, and/or sell copies of the Software,\r\n> and to permit persons to whom the Software is furnished to do so,\r\n> subject to the following conditions:\r\n>\r\n> The above copyright notice and this permission notice shall be\r\n> included in all copies or substantial portions of the Software.\r\n>\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n> NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\r\n> BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\r\n> ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n> SOFTWARE.\r\n\r\njs-nacl relies on libsodium, which is released under the\r\n[ISC license](https://en.wikipedia.org/wiki/ISC_license):\r\n\r\n> Copyright (c) 2013-2016\r\n> Frank Denis <j at pureftpd dot org>\r\n>\r\n> Permission to use, copy, modify, and/or distribute this software for any\r\n> purpose with or without fee is hereby granted, provided that the above\r\n> copyright notice and this permission notice appear in all copies.\r\n>\r\n> THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n> WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n> MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n> ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n> WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n> ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n> OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n\r\nlibsodium in turn relies on NaCl itself, which is public domain code\r\nby Daniel J. Bernstein and others.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tonyg/js-nacl/issues"
  },
  "homepage": "https://github.com/tonyg/js-nacl#readme",
  "_id": "js-nacl@1.2.1",
  "_shasum": "6d7cd08c5ba5b5b97a1594efd62d462c2e96846a",
  "_from": "tonyg/js-nacl#6dc1417",
  "_resolved": "git://github.com/tonyg/js-nacl.git#6dc1417057cd81381d332b370e82ceab1f2416af"
}
